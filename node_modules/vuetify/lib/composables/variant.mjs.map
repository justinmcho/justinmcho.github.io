{"version":3,"sources":["../../src/composables/variant.tsx"],"names":["useColor","computed","propsFactory","allowedVariants","genOverlays","isClickable","name","makeVariantProps","color","String","variant","type","default","validator","v","includes","useVariant","props","variantClasses","colorClasses","colorStyles"],"mappings":";AAAA;SACSA,Q,uBAET;;AACA,SAASC,QAAT,QAAyB,KAAzB;SACSC,Y,6BAET;;AAGA,OAAO,MAAMC,eAAe,GAAG,CAAC,WAAD,EAAc,UAAd,EAA0B,OAA1B,EAAmC,MAAnC,EAA2C,gBAA3C,CAAxB;AASP,OAAO,SAASC,WAAT,CAAsBC,WAAtB,EAA4CC,IAA5C,EAA0D;AAC/D,wCAEMD,WAAW;AAAA,aAAiB,GAAEC,IAAK;AAAxB,UAFjB;AAAA,aAIiB,GAAEA,IAAK;AAJxB;AAOD;AAED,OAAO,MAAMC,gBAAgB,GAAGL,YAAY,CAAC;AAC3CM,EAAAA,KAAK,EAAEC,MADoC;AAE3CC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEF,MADC;AAEPG,IAAAA,OAAO,EAAE,WAFF;AAGPC,IAAAA,SAAS,EAAGC,CAAD,IAAYX,eAAe,CAACY,QAAhB,CAAyBD,CAAzB;AAHhB;AAFkC,CAAD,EAOzC,SAPyC,CAArC;AASP,OAAO,SAASE,UAAT,CAAqBC,KAArB,EAA0CX,IAA1C,EAAwD;AAC7D,QAAMY,cAAc,GAAGjB,QAAQ,CAAC,MAAM;AACpC,WAAQ,GAAEK,IAAK,aAAYW,KAAK,CAACP,OAAQ,EAAzC;AACD,GAF8B,CAA/B;AAIA,QAAM;AAAES,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,MAAgCpB,QAAQ,CAACC,QAAQ,CAAC,OAAO;AAC7D,KAACgB,KAAK,CAACP,OAAN,KAAkB,WAAlB,GAAgC,YAAhC,GAA+C,MAAhD,GAAyDO,KAAK,CAACT;AADF,GAAP,CAAD,CAAT,CAA9C;AAIA,SAAO;AAAEW,IAAAA,YAAF;AAAgBC,IAAAA,WAAhB;AAA6BF,IAAAA;AAA7B,GAAP;AACD","sourcesContent":["// Composables\nimport { useColor } from '@/composables/color'\n\n// Utilities\nimport { computed } from 'vue'\nimport { propsFactory } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\n\nexport const allowedVariants = ['contained', 'outlined', 'plain', 'text', 'contained-text'] as const\n\nexport type Variant = typeof allowedVariants[number]\n\nexport interface VariantProps {\n  color?: String\n  variant: Variant\n}\n\nexport function genOverlays (isClickable: boolean, name: string) {\n  return (\n    <>\n      { isClickable && <div class={`${name}__overlay`} /> }\n\n      <div class={`${name}__underlay`} />\n    </>\n  )\n}\n\nexport const makeVariantProps = propsFactory({\n  color: String,\n  variant: {\n    type: String as PropType<Variant>,\n    default: 'contained',\n    validator: (v: any) => allowedVariants.includes(v),\n  },\n}, 'variant')\n\nexport function useVariant (props: VariantProps, name: string) {\n  const variantClasses = computed(() => {\n    return `${name}--variant-${props.variant}`\n  })\n\n  const { colorClasses, colorStyles } = useColor(computed(() => ({\n    [props.variant === 'contained' ? 'background' : 'text']: props.color,\n  })))\n\n  return { colorClasses, colorStyles, variantClasses }\n}\n"],"file":"variant.mjs"}
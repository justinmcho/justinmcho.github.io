import * as vue from 'vue';
import { PropType, JSXComponent, Prop, Ref, DirectiveBinding, ObjectDirective, App } from 'vue';
import * as vue_router from 'vue-router';

declare const _default$P: vue.DefineComponent<{
    theme: StringConstructor;
    overlaps: vue.Prop<string[], string[]>;
    fullHeight: {
        type: vue.PropType<boolean>;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fullHeight: boolean;
} & {
    theme?: string | undefined;
    overlaps?: string[] | undefined;
}>, {
    fullHeight: boolean;
}>;
//# sourceMappingURL=VApp.d.ts.map

declare const _default$O: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    name: Omit<{
        type: StringConstructor;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    collapse: BooleanConstructor;
    color: StringConstructor;
    flat: BooleanConstructor;
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    extensionHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    floating: BooleanConstructor;
    image: StringConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    prominent: BooleanConstructor;
    prominentHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    position: {
        type: PropType<"top" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    name: string;
    priority: number;
    absolute: boolean;
    collapse: boolean;
    height: string | number;
    extensionHeight: string | number;
    floating: boolean;
    modelValue: boolean;
    prominent: boolean;
    prominentHeight: string | number;
    position: "top" | "bottom";
} & {
    image?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
}>, {
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    name: string;
    priority: number;
    absolute: boolean;
    collapse: boolean;
    height: string | number;
    extensionHeight: string | number;
    floating: boolean;
    modelValue: boolean;
    prominent: boolean;
    prominentHeight: string | number;
    position: "top" | "bottom";
}>;
//# sourceMappingURL=VAppBar.d.ts.map

declare const _default$N: vue.DefineComponent<{
    icon: {
        type: StringConstructor;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    icon: string;
} & {}>, {
    icon: string;
}>;
//# sourceMappingURL=VAppBarNavIcon.d.ts.map

declare const _default$M: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VAppBarTitle.d.ts.map

declare const _default$L: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    color: StringConstructor;
    left: BooleanConstructor;
    right: BooleanConstructor;
    icon: StringConstructor;
    image: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    left: boolean;
    right: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    size: string | number;
} & {
    image?: string | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    icon?: string | undefined;
}>, {
    tag: string;
    left: boolean;
    right: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VAvatar.d.ts.map

declare const _default$K: vue.DefineComponent<{
    transition: Omit<{
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string | false | vue.TransitionProps;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    bordered: BooleanConstructor;
    color: {
        type: StringConstructor;
        default: string;
    };
    content: StringConstructor;
    dot: BooleanConstructor;
    floating: BooleanConstructor;
    icon: StringConstructor;
    inline: BooleanConstructor;
    label: {
        type: StringConstructor;
        default: string;
    };
    location: {
        type: StringConstructor;
        default: string;
        validator: (value: string) => boolean;
    };
    max: (StringConstructor | NumberConstructor)[];
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    offsetX: (StringConstructor | NumberConstructor)[];
    offsetY: (StringConstructor | NumberConstructor)[];
    textColor: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    label: string;
    tile: boolean;
    color: string;
    floating: boolean;
    modelValue: boolean;
    inline: boolean;
    dot: boolean;
    transition: string | false | vue.TransitionProps;
    bordered: boolean;
    location: string;
} & {
    rounded?: string | number | boolean | undefined;
    content?: string | undefined;
    icon?: string | undefined;
    max?: string | number | undefined;
    offsetX?: string | number | undefined;
    offsetY?: string | number | undefined;
    textColor?: string | undefined;
}>, {
    tag: string;
    label: string;
    rounded: string | number | boolean;
    tile: boolean;
    color: string;
    floating: boolean;
    modelValue: boolean;
    inline: boolean;
    dot: boolean;
    transition: string | false | vue.TransitionProps;
    bordered: boolean;
    location: string;
}>;
//# sourceMappingURL=VBadge.d.ts.map

declare const _default$J: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    avatar: StringConstructor;
    icon: StringConstructor;
    mobile: BooleanConstructor;
    singleLine: BooleanConstructor;
    sticky: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
    sticky: boolean;
    mobile: boolean;
    singleLine: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    icon?: string | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    avatar?: string | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    sticky: boolean;
    mobile: boolean;
    singleLine: boolean;
}>;
//# sourceMappingURL=VBanner.d.ts.map

declare const _default$I: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    name: Omit<{
        type: StringConstructor;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    bgColor: StringConstructor;
    color: StringConstructor;
    grow: BooleanConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: boolean;
    };
    mode: {
        type: StringConstructor;
        validator: (v: any) => boolean;
    };
    height: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    name: string;
    priority: number;
    absolute: boolean;
    height: string | number;
    modelValue: boolean;
    grow: boolean;
} & {
    mode?: string | undefined;
    theme?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    bgColor?: string | undefined;
}>, {
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    name: string;
    priority: number;
    absolute: boolean;
    height: string | number;
    modelValue: boolean;
    grow: boolean;
}>;
//# sourceMappingURL=VBottomNavigation.d.ts.map

declare const _default$H: vue.DefineComponent<{
    color: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    flat: BooleanConstructor;
    icon: (StringConstructor | BooleanConstructor)[];
    prependIcon: StringConstructor;
    appendIcon: StringConstructor;
    block: BooleanConstructor;
    stacked: BooleanConstructor;
    disabled: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    replace: boolean;
    fixed: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    size: string | number;
    block: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    stacked: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    icon?: string | boolean | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
}>, {
    replace: boolean;
    fixed: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    size: string | number;
    block: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    stacked: boolean;
}>;
//# sourceMappingURL=VBtn.d.ts.map

declare const _default$G: vue.DefineComponent<{
    color: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    theme: StringConstructor;
    appendAvatar: StringConstructor;
    appendIcon: StringConstructor;
    disabled: BooleanConstructor;
    flat: BooleanConstructor;
    hover: BooleanConstructor;
    image: StringConstructor;
    link: BooleanConstructor;
    prependAvatar: StringConstructor;
    prependIcon: StringConstructor;
    ripple: BooleanConstructor;
    subtitle: StringConstructor;
    text: StringConstructor;
    title: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    replace: boolean;
    fixed: boolean;
    link: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    absolute: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    hover: boolean;
    ripple: boolean;
} & {
    theme?: string | undefined;
    title?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    image?: string | undefined;
    text?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
    appendAvatar?: string | undefined;
    prependAvatar?: string | undefined;
    subtitle?: string | undefined;
}>, {
    replace: boolean;
    fixed: boolean;
    link: boolean;
    tag: string;
    flat: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
    hover: boolean;
    ripple: boolean;
}>;
//# sourceMappingURL=VCard.d.ts.map

declare const _default$F: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardActions.d.ts.map

declare const _default$E: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardAvatar.d.ts.map

declare const _default$D: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardHeader.d.ts.map

declare const _default$C: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardHeaderText.d.ts.map

declare const _default$B: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardImg.d.ts.map

declare const _default$A: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardMedia.d.ts.map

declare const _default$z: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardSubtitle.d.ts.map

declare const _default$y: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardText.d.ts.map

declare const _default$x: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VCardTitle.d.ts.map

declare const VCode: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;

interface DefaultsInstance {
    [key: string]: undefined | Record<string, unknown>;
    global?: Record<string, unknown>;
}
declare type DefaultsOptions = Partial<DefaultsInstance>;

declare const _default$w: vue.DefineComponent<{
    defaults: PropType<Partial<DefaultsInstance>>;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    defaults?: Partial<DefaultsInstance> | undefined;
}>, {}>;
//# sourceMappingURL=VDefaultsProvider.d.ts.map

declare const _default$v: vue.DefineComponent<{
    transition: Omit<{
        type: vue.PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<string | false | vue.TransitionProps | {
            component: vue.DefineComponent<{
                target: vue.PropType<HTMLElement>;
            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
                target?: HTMLElement | undefined;
            }>, {}>;
        }>;
        default: string | false | vue.TransitionProps | {
            component: vue.DefineComponent<{
                target: vue.PropType<HTMLElement>;
            }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
                target?: HTMLElement | undefined;
            }>, {}>;
        };
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: {
        type: vue.PropType<string | number>;
        default: string | number;
    };
    fullscreen: BooleanConstructor;
    origin: {
        type: StringConstructor;
        default: string;
    };
    retainFocus: {
        type: BooleanConstructor;
        default: boolean;
    };
    scrollable: BooleanConstructor;
    modelValue: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    modelValue: boolean;
    transition: string | false | vue.TransitionProps | {
        component: vue.DefineComponent<{
            target: vue.PropType<HTMLElement>;
        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
            target?: HTMLElement | undefined;
        }>, {}>;
    };
    width: string | number;
    origin: string;
    fullscreen: boolean;
    retainFocus: boolean;
    scrollable: boolean;
} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
}>, {
    modelValue: boolean;
    transition: string | false | vue.TransitionProps | {
        component: vue.DefineComponent<{
            target: vue.PropType<HTMLElement>;
        }, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
            target?: HTMLElement | undefined;
        }>, {}>;
    };
    width: string | number;
    origin: string;
    fullscreen: boolean;
    retainFocus: boolean;
    scrollable: boolean;
}>;
//# sourceMappingURL=VDialog.d.ts.map

declare const _default$u: vue.DefineComponent<{
    theme: StringConstructor;
    inset: BooleanConstructor;
    length: (StringConstructor | NumberConstructor)[];
    thickness: (StringConstructor | NumberConstructor)[];
    vertical: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    inset: boolean;
    vertical: boolean;
} & {
    length?: string | number | undefined;
    theme?: string | undefined;
    thickness?: string | number | undefined;
}>, {
    inset: boolean;
    vertical: boolean;
}>;
//# sourceMappingURL=VDivider.d.ts.map

declare const _default$t: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
}>;
//# sourceMappingURL=VFooter.d.ts.map

declare const _default$s: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    fluid: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    fluid: boolean;
} & {}>, {
    tag: string;
    fluid: boolean;
}>;
//# sourceMappingURL=VContainer.d.ts.map

declare const _default$r: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    alignSelf: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    order: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    offset: {
        type: (StringConstructor | NumberConstructor)[];
        default: null;
    };
    cols: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    offset: string | number;
    order: string | number;
    alignSelf: string;
    cols: string | number | boolean;
} & {}>, {
    tag: string;
    offset: string | number;
    order: string | number;
    alignSelf: string;
    cols: string | number | boolean;
}>;
//# sourceMappingURL=VCol.d.ts.map

declare const _default$q: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    alignContent: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    justify: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
    dense: BooleanConstructor;
    noGutters: BooleanConstructor;
    align: {
        type: StringConstructor;
        default: null;
        validator: (str: any) => boolean;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    dense: boolean;
    justify: string;
    align: string;
    alignContent: string;
    noGutters: boolean;
} & {}>, {
    tag: string;
    dense: boolean;
    justify: string;
    align: string;
    alignContent: string;
    noGutters: boolean;
}>;
//# sourceMappingURL=VRow.d.ts.map

declare const _default$p: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VSpacer.d.ts.map

declare type IconValue = string | JSXComponent;
interface IconAliases {
    [name: string]: IconValue;
    complete: IconValue;
    cancel: IconValue;
    close: IconValue;
    delete: IconValue;
    clear: IconValue;
    success: IconValue;
    info: IconValue;
    warning: IconValue;
    error: IconValue;
    prev: IconValue;
    next: IconValue;
    checkboxOn: IconValue;
    checkboxOff: IconValue;
    checkboxIndeterminate: IconValue;
    delimiter: IconValue;
    sort: IconValue;
    expand: IconValue;
    menu: IconValue;
    subgroup: IconValue;
    dropdown: IconValue;
    radioOn: IconValue;
    radioOff: IconValue;
    edit: IconValue;
    ratingEmpty: IconValue;
    ratingFull: IconValue;
    ratingHalf: IconValue;
    loading: IconValue;
    first: IconValue;
    last: IconValue;
    unfold: IconValue;
    file: IconValue;
    plus: IconValue;
    minus: IconValue;
}
interface IconProps {
    tag: string;
    icon: IconValue;
    disabled?: Boolean;
}
declare type IconComponent = JSXComponent<IconProps>;
interface IconSet {
    component: IconComponent;
}
declare type IconOptions = {
    defaultSet: string;
    aliases?: Partial<IconAliases>;
    sets: Record<string, IconSet>;
};
declare const VComponentIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VSvgIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VLigatureIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    icon: IconValue;
} & {}>, {}>;
declare const VClassIcon: vue.DefineComponent<{
    icon: {
        type: PropType<IconValue>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        required: true;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    icon: IconValue;
} & {}>, {}>;

declare const _default$o: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    color: StringConstructor;
    left: BooleanConstructor;
    right: BooleanConstructor;
    icon: {
        type: PropType<IconValue>;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    left: boolean;
    right: boolean;
    size: string | number;
} & {
    color?: string | undefined;
    icon?: IconValue | undefined;
}>, {
    tag: string;
    left: boolean;
    right: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VIcon.d.ts.map

interface srcObject {
    src?: string;
    srcset?: string;
    lazySrc?: string;
    aspect: number;
}
declare const _default$n: vue.DefineComponent<{
    transition: {
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    };
    aspectRatio: (StringConstructor | NumberConstructor)[];
    alt: StringConstructor;
    cover: BooleanConstructor;
    eager: BooleanConstructor;
    lazySrc: StringConstructor;
    options: {
        type: PropType<IntersectionObserverInit>;
        default: () => {
            root: undefined;
            rootMargin: undefined;
            threshold: undefined;
        };
    };
    position: {
        type: StringConstructor;
        default: string;
    };
    sizes: StringConstructor;
    src: {
        type: PropType<string | srcObject>;
        default: string;
    };
    srcset: StringConstructor;
}, {
    currentSrc: vue.Ref<string>;
    image: vue.Ref<HTMLImageElement | undefined>;
    state: vue.Ref<"error" | "idle" | "loading" | "loaded">;
    naturalWidth: vue.Ref<number | undefined>;
    naturalHeight: vue.Ref<number | undefined>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, ("loadstart" | "load" | "error")[], "error" | "loadstart" | "load", vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    position: string;
    cover: boolean;
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    options: IntersectionObserverInit;
    src: string | srcObject;
} & {
    aspectRatio?: string | number | undefined;
    alt?: string | undefined;
    lazySrc?: string | undefined;
    sizes?: string | undefined;
    srcset?: string | undefined;
}>, {
    position: string;
    cover: boolean;
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    options: IntersectionObserverInit;
    src: string | srcObject;
}>;

declare const VKbd: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;

declare const _default$m: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    modelValue: {
        type: (ArrayConstructor | ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    multiple: BooleanConstructor;
    mandatory: vue.PropType<boolean | "force">;
    max: NumberConstructor;
    selectedClass: {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: any) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    multiple: boolean;
    selectedClass: string;
} & {
    theme?: string | undefined;
    modelValue?: undefined;
    mandatory?: boolean | "force" | undefined;
    max?: number | undefined;
}>, {
    tag: string;
    modelValue: undefined;
    multiple: boolean;
    selectedClass: string;
}>;

declare const _default$l: vue.DefineComponent<{
    value: {
        type: (ObjectConstructor | StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    index: NumberConstructor;
    disabled: BooleanConstructor;
    selectedClass: StringConstructor;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    disabled: boolean;
} & {
    value?: undefined;
    index?: number | undefined;
    selectedClass?: string | undefined;
}>, {
    value: undefined;
    disabled: boolean;
}>;
//# sourceMappingURL=VItem.d.ts.map

declare const _default$k: vue.DefineComponent<{
    overlaps: vue.Prop<string[], string[]>;
    fullHeight: BooleanConstructor;
}, {
    getLayoutItem: (id: string) => {
        size: number;
        top: number;
        left: number;
        right: number;
        bottom: number;
        id: string;
    } | undefined;
    items: vue.ComputedRef<{
        size: number;
        top: number;
        left: number;
        right: number;
        bottom: number;
        id: string;
    }[]>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fullHeight: boolean;
} & {
    overlaps?: string[] | undefined;
}>, {
    fullHeight: boolean;
}>;
//# sourceMappingURL=VLayout.d.ts.map

declare const _default$j: vue.DefineComponent<{
    name: {
        type: StringConstructor;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    position: {
        type: PropType<"top" | "left" | "right" | "bottom">;
        required: true;
    };
    size: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    modelValue: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    position: "top" | "left" | "right" | "bottom";
    size: string | number;
} & {
    name?: string | undefined;
}>, {
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    size: string | number;
}>;
//# sourceMappingURL=VLayoutItem.d.ts.map

declare const _default$i: vue.DefineComponent<{
    locale: StringConstructor;
    fallbackLocale: StringConstructor;
    messages: ObjectConstructor;
    rtl: {
        type: BooleanConstructor;
        default: undefined;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    rtl?: boolean | undefined;
    locale?: string | undefined;
    fallbackLocale?: string | undefined;
    messages?: Record<string, any> | undefined;
}>, {
    rtl: boolean;
}>;
//# sourceMappingURL=VLocaleProvider.d.ts.map

declare const _default$h: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: StringConstructor;
    disabled: BooleanConstructor;
    lines: {
        type: StringConstructor;
        default: string;
    };
    nav: BooleanConstructor;
    subheader: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    nav: boolean;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    disabled: boolean;
    lines: string;
    subheader: string | boolean;
} & {
    theme?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    tag: string;
    nav: boolean;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    disabled: boolean;
    lines: string;
    subheader: string | boolean;
}>;
//# sourceMappingURL=VList.d.ts.map

declare const _default$g: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    color: StringConstructor;
    inset: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    inset: boolean;
} & {
    color?: string | undefined;
}>, {
    tag: string;
    inset: boolean;
}>;
//# sourceMappingURL=VListSubheader.d.ts.map

declare const _default$f: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListImg.d.ts.map

declare const _default$e: vue.DefineComponent<{
    color: StringConstructor;
    variant: Omit<{
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: string;
        validator: (v: any) => boolean;
    }, "default" | "type"> & {
        type: vue.PropType<"text" | "contained" | "outlined" | "plain" | "contained-text">;
        default: "text" | "contained" | "outlined" | "plain" | "contained-text";
    };
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    href: StringConstructor;
    replace: BooleanConstructor;
    to: vue.PropType<vue_router.RouteLocationRaw>;
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    density: {
        type: vue.PropType<"default" | "comfortable" | "compact" | null>;
        default: string;
        validator: (v: any) => boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    active: BooleanConstructor;
    activeColor: StringConstructor;
    activeClass: StringConstructor;
    appendAvatar: StringConstructor;
    appendIcon: StringConstructor;
    disabled: BooleanConstructor;
    link: BooleanConstructor;
    prependAvatar: StringConstructor;
    prependIcon: StringConstructor;
    subtitle: StringConstructor;
    title: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    replace: boolean;
    link: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    tile: boolean;
    active: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
} & {
    theme?: string | undefined;
    title?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    color?: string | undefined;
    height?: string | number | undefined;
    to?: vue_router.RouteLocationRaw | undefined;
    href?: string | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    prependIcon?: string | undefined;
    appendIcon?: string | undefined;
    appendAvatar?: string | undefined;
    prependAvatar?: string | undefined;
    subtitle?: string | undefined;
    activeColor?: string | undefined;
    activeClass?: string | undefined;
}>, {
    replace: boolean;
    link: boolean;
    tag: string;
    density: "default" | "comfortable" | "compact" | null;
    rounded: string | number | boolean;
    tile: boolean;
    active: boolean;
    disabled: boolean;
    variant: "text" | "contained" | "outlined" | "plain" | "contained-text";
}>;
//# sourceMappingURL=VListItem.d.ts.map

declare const _default$d: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    left: BooleanConstructor;
    right: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    left: boolean;
    right: boolean;
} & {}>, {
    tag: string;
    left: boolean;
    right: boolean;
}>;
//# sourceMappingURL=VListItemAvatar.d.ts.map

declare const _default$c: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemHeader.d.ts.map

declare const _default$b: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    left: BooleanConstructor;
    right: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    left: boolean;
    right: boolean;
} & {}>, {
    tag: string;
    left: boolean;
    right: boolean;
}>;
//# sourceMappingURL=VListItemMedia.d.ts.map

declare const _default$a: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemSubtitle.d.ts.map

declare const _default$9: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VListItemTitle.d.ts.map

declare const _default$8: vue.DefineComponent<{
    transition: Omit<{
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    }, "default" | "type"> & {
        type: PropType<string | false | vue.TransitionProps>;
        default: string | false | vue.TransitionProps;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    modelValue: BooleanConstructor;
    options: {
        type: PropType<IntersectionObserverInit>;
        default: () => {
            root: undefined;
            rootMargin: undefined;
            threshold: undefined;
        };
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    modelValue: boolean;
    transition: string | false | vue.TransitionProps;
    options: IntersectionObserverInit;
} & {
    height?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    tag: string;
    modelValue: boolean;
    transition: string | false | vue.TransitionProps;
    options: IntersectionObserverInit;
}>;
//# sourceMappingURL=VLazy.d.ts.map

declare const _default$7: vue.DefineComponent<{
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: vue.PropType<string>;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
} & {}>, {
    tag: string;
}>;
//# sourceMappingURL=VMain.d.ts.map

declare const _default$6: vue.DefineComponent<{
    theme: StringConstructor;
    tag: Omit<{
        type: StringConstructor;
        default: string;
    }, "default" | "type"> & {
        type: PropType<string>;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    name: {
        type: StringConstructor;
    };
    priority: {
        type: NumberConstructor;
        default: number;
    };
    absolute: BooleanConstructor;
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: StringConstructor;
    disableResizeWatcher: BooleanConstructor;
    expandOnHover: BooleanConstructor;
    modelValue: {
        type: BooleanConstructor;
        default: null;
    };
    permanent: BooleanConstructor;
    rail: BooleanConstructor;
    railWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    image: StringConstructor;
    temporary: BooleanConstructor;
    width: {
        type: (StringConstructor | NumberConstructor)[];
        default: number;
    };
    position: {
        type: PropType<"left" | "right" | "bottom">;
        default: string;
        validator: (value: any) => boolean;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    tile: boolean;
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    position: "left" | "right" | "bottom";
    width: string | number;
    disableResizeWatcher: boolean;
    expandOnHover: boolean;
    permanent: boolean;
    rail: boolean;
    railWidth: string | number;
    temporary: boolean;
} & {
    theme?: string | undefined;
    image?: string | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    name?: string | undefined;
    color?: string | undefined;
}>, {
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    priority: number;
    absolute: boolean;
    modelValue: boolean;
    position: "left" | "right" | "bottom";
    width: string | number;
    disableResizeWatcher: boolean;
    expandOnHover: boolean;
    permanent: boolean;
    rail: boolean;
    railWidth: string | number;
    temporary: boolean;
}>;
//# sourceMappingURL=VNavigationDrawer.d.ts.map

declare const _default$5: vue.DefineComponent<{
    transition: {
        type: PropType<string | false | vue.TransitionProps>;
        default: string;
        validator: (val: unknown) => boolean;
    };
    theme: StringConstructor;
    absolute: BooleanConstructor;
    attach: {
        type: PropType<string | boolean | Element>;
        default: string;
    };
    eager: BooleanConstructor;
    noClickAnimation: BooleanConstructor;
    modelValue: BooleanConstructor;
    origin: Prop<string | Element, string | Element>;
    persistent: BooleanConstructor;
    positionStrategy: {
        type: PropType<"global" | "connected" | "flexible">;
        default: string;
        validator: (val: any) => boolean;
    };
    scrim: {
        type: (StringConstructor | BooleanConstructor)[];
        default: boolean;
    };
    scrollStrategy: {
        type: PropType<"block" | "close" | "reposition">;
        default: string;
        validator: (val: any) => boolean;
    };
}, {
    animateClick: () => void;
    content: Ref<HTMLElement | undefined>;
}, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, {
    'click:outside': (e: MouseEvent) => true;
    'update:modelValue': (value: boolean) => true;
}, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    absolute: boolean;
    modelValue: boolean;
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    attach: string | boolean | Element;
    noClickAnimation: boolean;
    persistent: boolean;
    positionStrategy: "global" | "connected" | "flexible";
    scrim: string | boolean;
    scrollStrategy: "block" | "close" | "reposition";
} & {
    theme?: string | undefined;
    origin?: string | Element | undefined;
}>, {
    absolute: boolean;
    modelValue: boolean;
    transition: string | false | vue.TransitionProps;
    eager: boolean;
    attach: string | boolean | Element;
    noClickAnimation: boolean;
    persistent: boolean;
    positionStrategy: "global" | "connected" | "flexible";
    scrim: string | boolean;
    scrollStrategy: "block" | "close" | "reposition";
}>;
//# sourceMappingURL=VOverlay.d.ts.map

declare const _default$4: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    color: {
        type: StringConstructor;
        default: string;
    };
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
    color: string;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    color: string;
}>;
//# sourceMappingURL=VSheet.d.ts.map

declare const _default$3: vue.DefineComponent<{
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    aspectRatio: (StringConstructor | NumberConstructor)[];
    contentClass: StringConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    height?: string | number | undefined;
    aspectRatio?: string | number | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
    contentClass?: string | undefined;
}>, {}>;

declare const _default$2: vue.DefineComponent<{
    theme: StringConstructor;
    tag: {
        type: StringConstructor;
        default: string;
    };
    rounded: {
        type: (StringConstructor | NumberConstructor | BooleanConstructor)[];
        default: undefined;
    };
    tile: BooleanConstructor;
    absolute: BooleanConstructor;
    bottom: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    fixed: BooleanConstructor;
    left: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    position: {
        type: vue.PropType<"fixed" | "relative" | "absolute" | "static" | "sticky">;
        validator: (v: any) => boolean;
    };
    right: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    top: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    elevation: {
        type: (StringConstructor | NumberConstructor)[];
        validator(v: any): boolean;
    };
    height: (StringConstructor | NumberConstructor)[];
    maxHeight: (StringConstructor | NumberConstructor)[];
    maxWidth: (StringConstructor | NumberConstructor)[];
    minHeight: (StringConstructor | NumberConstructor)[];
    minWidth: (StringConstructor | NumberConstructor)[];
    width: (StringConstructor | NumberConstructor)[];
    border: (StringConstructor | NumberConstructor | BooleanConstructor)[];
    lightsOut: BooleanConstructor;
    window: BooleanConstructor;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    fixed: boolean;
    tag: string;
    tile: boolean;
    absolute: boolean;
    lightsOut: boolean;
    window: boolean;
} & {
    theme?: string | undefined;
    top?: string | number | boolean | undefined;
    left?: string | number | boolean | undefined;
    right?: string | number | boolean | undefined;
    bottom?: string | number | boolean | undefined;
    border?: string | number | boolean | undefined;
    elevation?: string | number | undefined;
    rounded?: string | number | boolean | undefined;
    height?: string | number | undefined;
    position?: "fixed" | "relative" | "absolute" | "static" | "sticky" | undefined;
    maxHeight?: string | number | undefined;
    maxWidth?: string | number | undefined;
    minHeight?: string | number | undefined;
    minWidth?: string | number | undefined;
    width?: string | number | undefined;
}>, {
    fixed: boolean;
    tag: string;
    rounded: string | number | boolean;
    tile: boolean;
    absolute: boolean;
    lightsOut: boolean;
    window: boolean;
}>;
//# sourceMappingURL=VSystemBar.d.ts.map

declare const _default$1: vue.DefineComponent<{
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: StringConstructor;
    withBackground: BooleanConstructor;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>[] | JSX.Element | undefined, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    tag: string;
    withBackground: boolean;
} & {
    theme?: string | undefined;
}>, {
    tag: string;
    withBackground: boolean;
}>;
//# sourceMappingURL=VThemeProvider.d.ts.map

declare const _default: vue.DefineComponent<{
    target: PropType<HTMLElement>;
}, () => JSX.Element, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    target?: HTMLElement | undefined;
}>, {}>;
//# sourceMappingURL=dialog-transition.d.ts.map

declare const VCarouselTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VCarouselReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VTabTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VTabReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VMenuTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VFabTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VDialogBottomTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VDialogTopTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VFadeTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScaleTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollXTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollXReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollYTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VScrollYReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideXTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideXReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideYTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VSlideYReverseTransition: vue.DefineComponent<{
    group: BooleanConstructor;
    hideOnLeave: BooleanConstructor;
    leaveAbsolute: BooleanConstructor;
    mode: {
        type: StringConstructor;
        default: string | undefined;
    };
    origin: {
        type: StringConstructor;
        default: string;
    };
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
} & {}>, {
    mode: string;
    group: boolean;
    hideOnLeave: boolean;
    leaveAbsolute: boolean;
    origin: string;
}>;
declare const VExpandTransition: vue.DefineComponent<{
    mode: vue.Prop<"in-out" | "out-in" | "default", "in-out" | "out-in" | "default">;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    mode?: "in-out" | "out-in" | "default" | undefined;
}>, {}>;
declare const VExpandXTransition: vue.DefineComponent<{
    mode: vue.Prop<"in-out" | "out-in" | "default", "in-out" | "out-in" | "default">;
}, () => vue.VNode<vue.RendererNode, vue.RendererElement, {
    [key: string]: any;
}>, unknown, {}, {}, vue.ComponentOptionsMixin, vue.ComponentOptionsMixin, Record<string, any>, string, vue.VNodeProps & vue.AllowedComponentProps & vue.ComponentCustomProps, Readonly<{} & {
    mode?: "in-out" | "out-in" | "default" | undefined;
}>, {}>;

interface ClickOutsideBindingArgs {
    handler: (e: MouseEvent) => void;
    closeConditional?: (e: Event) => boolean;
    include?: () => HTMLElement[];
}
interface ClickOutsideDirectiveBinding extends DirectiveBinding {
    value: ((e: MouseEvent) => void) | ClickOutsideBindingArgs;
}
declare const ClickOutside: {
    mounted(el: HTMLElement, binding: ClickOutsideDirectiveBinding): void;
    unmounted(el: HTMLElement): void;
};

declare const Intersect: ObjectDirective<HTMLElement>;

interface ResizeDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {
    value: () => void;
    modifiers?: {
        active?: boolean;
        quiet?: boolean;
    };
}
declare function mounted$1(el: HTMLElement, binding: ResizeDirectiveBinding): void;
declare function unmounted$1(el: HTMLElement): void;
declare const Resize: {
    mounted: typeof mounted$1;
    unmounted: typeof unmounted$1;
};

declare const Ripple: ObjectDirective;

interface ScrollDirectiveBinding extends Omit<DirectiveBinding, 'modifiers'> {
    value: EventListener | {
        handler: EventListener;
        options?: AddEventListenerOptions;
    } | EventListenerObject & {
        options?: AddEventListenerOptions;
    };
    modifiers?: {
        self?: boolean;
    };
}
declare function mounted(el: HTMLElement, binding: ScrollDirectiveBinding): void;
declare function unmounted(el: HTMLElement): void;
declare function updated(el: HTMLElement, binding: ScrollDirectiveBinding): void;
declare const Scroll: {
    mounted: typeof mounted;
    unmounted: typeof unmounted;
    updated: typeof updated;
};

declare const Touch: ObjectDirective;

declare type DisplayBreakpoint = keyof DisplayThresholds;
interface DisplayThresholds {
    xs: number;
    sm: number;
    md: number;
    lg: number;
    xl: number;
    xxl: number;
}
interface DisplayOptions {
    mobileBreakpoint?: number | DisplayBreakpoint;
    thresholds?: Partial<DisplayThresholds>;
}

interface BaseColors {
    background: string;
    surface: string;
    primary: string;
    secondary: string;
    success: string;
    warning: string;
    error: string;
    info: string;
}
interface OnColors {
    'on-background': string;
    'on-surface': string;
    'on-primary': string;
    'on-secondary': string;
    'on-success': string;
    'on-warning': string;
    'on-error': string;
    'on-info': string;
}
interface ThemeDefinitionColors extends BaseColors, Partial<OnColors> {
    [key: string]: string | undefined;
}
interface ThemeDefinition {
    dark: boolean;
    colors: ThemeDefinitionColors;
    variables: Record<string, string | number>;
}
interface VariationsOptions {
    colors: string[];
    lighten: number;
    darken: number;
}
declare type ThemeOptions = false | {
    defaultTheme?: string;
    variations?: false | VariationsOptions;
    themes?: Record<string, ThemeDefinition>;
};

interface LocaleMessages {
    [key: string]: LocaleMessages | string;
}
interface LocaleOptions {
    defaultLocale?: string;
    fallbackLocale?: string;
    messages?: LocaleMessages;
}
interface LocaleProps {
    locale?: string;
    fallbackLocale?: string;
    messages?: LocaleMessages;
}
interface LocaleInstance {
    current: Ref<string>;
    fallback: Ref<string>;
    messages: Ref<LocaleMessages>;
    t: (key: string, ...params: unknown[]) => string;
}
interface LocaleAdapter {
    createRoot: (app: App) => LocaleInstance;
    getScope: () => LocaleInstance;
    createScope: (options?: LocaleProps) => LocaleInstance;
}

interface RtlOptions {
    defaultRtl?: boolean;
    rtl?: Record<string, boolean>;
}

interface VuetifyOptions {
    components?: Record<string, any>;
    directives?: Record<string, any>;
    defaults?: DefaultsOptions;
    display?: DisplayOptions;
    theme?: ThemeOptions;
    icons?: IconOptions;
    locale?: (LocaleOptions & RtlOptions) | (LocaleAdapter & RtlOptions);
}
declare const createVuetify: (options?: VuetifyOptions) => {
    install: (app: App) => void;
};

export { ClickOutside, Intersect, Resize, Ripple, Scroll, Touch, _default$P as VApp, _default$O as VAppBar, _default$N as VAppBarNavIcon, _default$M as VAppBarTitle, _default$L as VAvatar, _default$K as VBadge, _default$J as VBanner, _default$I as VBottomNavigation, _default$H as VBtn, _default$G as VCard, _default$F as VCardActions, _default$E as VCardAvatar, _default$D as VCardHeader, _default$C as VCardHeaderText, _default$B as VCardImg, _default$C as VCardItem, _default$A as VCardMedia, _default$z as VCardSubtitle, _default$y as VCardText, _default$x as VCardTitle, VCarouselReverseTransition, VCarouselTransition, VClassIcon, VCode, _default$r as VCol, VComponentIcon, _default$s as VContainer, _default$w as VDefaultsProvider, _default$v as VDialog, VDialogBottomTransition, VDialogTopTransition, _default as VDialogTransition, _default$u as VDivider, VExpandTransition, VExpandXTransition, VFabTransition, VFadeTransition, _default$t as VFooter, _default$o as VIcon, _default$n as VImg, _default$l as VItem, _default$m as VItemGroup, VKbd, _default$k as VLayout, _default$j as VLayoutItem, _default$8 as VLazy, VLigatureIcon, _default$h as VList, _default$f as VListImg, _default$e as VListItem, _default$d as VListItemAvatar, _default$c as VListItemHeader, _default$b as VListItemMedia, _default$a as VListItemSubtitle, _default$9 as VListItemTitle, _default$g as VListSubheader, _default$i as VLocaleProvider, _default$7 as VMain, VMenuTransition, _default$6 as VNavigationDrawer, _default$5 as VOverlay, _default$3 as VResponsive, _default$q as VRow, VScaleTransition, VScrollXReverseTransition, VScrollXTransition, VScrollYReverseTransition, VScrollYTransition, _default$4 as VSheet, VSlideXReverseTransition, VSlideXTransition, VSlideYReverseTransition, VSlideYTransition, _default$p as VSpacer, VSvgIcon, _default$2 as VSystemBar, VTabReverseTransition, VTabTransition, _default$1 as VThemeProvider, VuetifyOptions, createVuetify };

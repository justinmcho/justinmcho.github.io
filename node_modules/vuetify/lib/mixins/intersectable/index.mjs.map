{"version":3,"sources":["../../../src/mixins/intersectable/index.ts"],"names":["Intersect","consoleWarn","Vue","intersectable","options","extend","name","mounted","inserted","$el","value","onObserve","destroyed","unbind","methods","entries","observer","isIntersecting","i","length","onVisible","callback"],"mappings":"AAAA;;AACA;AAEA;OACOA,S,8CAEP;;SACSC,W,kCAET;;AACA,OAAOC,GAAP,MAAgB,KAAhB;AAEA,eAAe,SAASC,aAAT,CAAwBC,OAAxB,EAA0D;AACvE,SAAOF,GAAG,CAACG,MAAJ,CAAW;AAChBC,IAAAA,IAAI,EAAE,eADU;;AAGhBC,IAAAA,OAAO,GAAI;AACTP,MAAAA,SAAS,CAACQ,QAAV,CAAmB,KAAKC,GAAxB,EAA4C;AAC1CH,QAAAA,IAAI,EAAE,WADoC;AAE1CI,QAAAA,KAAK,EAAE,KAAKC;AAF8B,OAA5C;AAID,KARe;;AAUhBC,IAAAA,SAAS,GAAI;AACXZ,MAAAA,SAAS,CAACa,MAAV,CAAiB,KAAKJ,GAAtB;AACD,KAZe;;AAchBK,IAAAA,OAAO,EAAE;AACPH,MAAAA,SAAS,CAAEI,OAAF,EAAwCC,QAAxC,EAAwEC,cAAxE,EAAiG;AACxG,YAAI,CAACA,cAAL,EAAqB;;AAErB,aAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,MAAM,GAAGf,OAAO,CAACgB,SAAR,CAAkBD,MAA3C,EAAmDD,CAAC,GAAGC,MAAvD,EAA+DD,CAAC,EAAhE,EAAoE;AAClE,gBAAMG,QAAQ,GAAI,IAAD,CAAcjB,OAAO,CAACgB,SAAR,CAAkBF,CAAlB,CAAd,CAAjB;;AAEA,cAAI,OAAOG,QAAP,KAAoB,UAAxB,EAAoC;AAClCA,YAAAA,QAAQ;AACR;AACD;;AAEDpB,UAAAA,WAAW,CAACG,OAAO,CAACgB,SAAR,CAAkBF,CAAlB,IAAuB,wFAAxB,CAAX;AACD;AACF;;AAdM;AAdO,GAAX,CAAP;AA+BD","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Directives\nimport Intersect from '../../directives/intersect'\n\n// Utilities\nimport { consoleWarn } from '../../util/console'\n\n// Types\nimport Vue from 'vue'\n\nexport default function intersectable (options: { onVisible: string[] }) {\n  return Vue.extend({\n    name: 'intersectable',\n\n    mounted () {\n      Intersect.inserted(this.$el as HTMLElement, {\n        name: 'intersect',\n        value: this.onObserve,\n      })\n    },\n\n    destroyed () {\n      Intersect.unbind(this.$el as HTMLElement)\n    },\n\n    methods: {\n      onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n        if (!isIntersecting) return\n\n        for (let i = 0, length = options.onVisible.length; i < length; i++) {\n          const callback = (this as any)[options.onVisible[i]]\n\n          if (typeof callback === 'function') {\n            callback()\n            continue\n          }\n\n          consoleWarn(options.onVisible[i] + ' method is not available on the instance but referenced in intersectable mixin options')\n        }\n      },\n    },\n  })\n}\n"],"file":"index.mjs"}
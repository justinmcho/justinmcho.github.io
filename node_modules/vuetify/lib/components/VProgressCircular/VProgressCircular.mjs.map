{"version":3,"sources":["../../../src/components/VProgressCircular/VProgressCircular.ts"],"names":["intersect","Colorable","convertToUnit","extend","name","directives","props","button","Boolean","indeterminate","rotate","type","Number","String","default","size","width","value","data","radius","isVisible","computed","calculatedSize","circumference","Math","PI","classes","normalizedValue","parseFloat","strokeDashArray","round","strokeDashOffset","strokeWidth","viewBoxSize","styles","height","svgStyles","transform","methods","genCircle","offset","$createElement","class","attrs","fill","cx","cy","r","genSvg","children","style","xmlns","viewBox","genInfo","staticClass","$slots","onObserve","entries","observer","isIntersecting","render","h","setTextColor","color","role","undefined","on","$listeners"],"mappings":"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","sourcesContent":["// @ts-nocheck\n/* eslint-disable */\n\n// Styles\nimport './VProgressCircular.sass'\n\n// Directives\nimport intersect from '../../directives/intersect'\n\n// Mixins\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport { convertToUnit } from '../../util/helpers'\n\n// Types\nimport { VNode, VNodeChildren } from 'vue'\n\n/* @vue/component */\nexport default Colorable.extend({\n  name: 'v-progress-circular',\n\n  directives: { intersect },\n\n  props: {\n    button: Boolean,\n    indeterminate: Boolean,\n    rotate: {\n      type: [Number, String],\n      default: 0,\n    },\n    size: {\n      type: [Number, String],\n      default: 32,\n    },\n    width: {\n      type: [Number, String],\n      default: 4,\n    },\n    value: {\n      type: [Number, String],\n      default: 0,\n    },\n  },\n\n  data: () => ({\n    radius: 20,\n    isVisible: true,\n  }),\n\n  computed: {\n    calculatedSize (): number {\n      return Number(this.size) + (this.button ? 8 : 0)\n    },\n\n    circumference (): number {\n      return 2 * Math.PI * this.radius\n    },\n\n    classes (): object {\n      return {\n        'v-progress-circular--visible': this.isVisible,\n        'v-progress-circular--indeterminate': this.indeterminate,\n        'v-progress-circular--button': this.button,\n      }\n    },\n\n    normalizedValue (): number {\n      if (this.value < 0) {\n        return 0\n      }\n\n      if (this.value > 100) {\n        return 100\n      }\n\n      return parseFloat(this.value)\n    },\n\n    strokeDashArray (): number {\n      return Math.round(this.circumference * 1000) / 1000\n    },\n\n    strokeDashOffset (): string {\n      return ((100 - this.normalizedValue) / 100) * this.circumference + 'px'\n    },\n\n    strokeWidth (): number {\n      return Number(this.width) / +this.size * this.viewBoxSize * 2\n    },\n\n    styles (): object {\n      return {\n        height: convertToUnit(this.calculatedSize),\n        width: convertToUnit(this.calculatedSize),\n      }\n    },\n\n    svgStyles (): object {\n      return {\n        transform: `rotate(${Number(this.rotate)}deg)`,\n      }\n    },\n\n    viewBoxSize (): number {\n      return this.radius / (1 - Number(this.width) / +this.size)\n    },\n  },\n\n  methods: {\n    genCircle (name: string, offset: string | number): VNode {\n      return this.$createElement('circle', {\n        class: `v-progress-circular__${name}`,\n        attrs: {\n          fill: 'transparent',\n          cx: 2 * this.viewBoxSize,\n          cy: 2 * this.viewBoxSize,\n          r: this.radius,\n          'stroke-width': this.strokeWidth,\n          'stroke-dasharray': this.strokeDashArray,\n          'stroke-dashoffset': offset,\n        },\n      })\n    },\n    genSvg (): VNode {\n      const children = [\n        this.indeterminate || this.genCircle('underlay', 0),\n        this.genCircle('overlay', this.strokeDashOffset),\n      ] as VNodeChildren\n\n      return this.$createElement('svg', {\n        style: this.svgStyles,\n        attrs: {\n          xmlns: 'http://www.w3.org/2000/svg',\n          viewBox: `${this.viewBoxSize} ${this.viewBoxSize} ${2 * this.viewBoxSize} ${2 * this.viewBoxSize}`,\n        },\n      }, children)\n    },\n    genInfo (): VNode {\n      return this.$createElement('div', {\n        staticClass: 'v-progress-circular__info',\n      }, this.$slots.default)\n    },\n    onObserve (entries: IntersectionObserverEntry[], observer: IntersectionObserver, isIntersecting: boolean) {\n      this.isVisible = isIntersecting\n    },\n  },\n\n  render (h): VNode {\n    return h('div', this.setTextColor(this.color, {\n      staticClass: 'v-progress-circular',\n      attrs: {\n        role: 'progressbar',\n        'aria-valuemin': 0,\n        'aria-valuemax': 100,\n        'aria-valuenow': this.indeterminate ? undefined : this.normalizedValue,\n      },\n      class: this.classes,\n      directives: [{\n        name: 'intersect',\n        value: this.onObserve,\n      }],\n      style: this.styles,\n      on: this.$listeners,\n    }), [\n      this.genSvg(),\n      this.genInfo(),\n    ])\n  },\n})\n"],"file":"VProgressCircular.mjs"}